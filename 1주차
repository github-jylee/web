# HTML, CSS, JavaScript가 뭔가요?
- https://www.youtube.com/watch?v=ffENjt7aEdc
- 갖다놓고(뭐가 뭔지 알려줌- marks stuff), 꾸미고, 시킨다
- react native, native script, electron js
- 마크업: 구조를 갖다놓음, cascading style sheet: 꾸며줌, javascript: nodejs까지 브라우저에서 변형 또는 만들기
- 각각 한 파일씩 만들어서, 자바스크립트로 생명력을 넣음
- 배우기는 쉬운데, 효율적이고 유연한 적용은 많이 만들고 겪어봐야, 크롬 개발자 열어보고 공부해야


# HTML 이 영상 하나로 끝내세요
- https://www.youtube.com/watch?v=50JOpxN0554
- https://repl.it
- <h1> <b> <i> <p> <img>
- <div>는 한줄 전체 공간 차지 (블록), <span>은 자기 내용물 만큼의 공간만 차지 (인라인 엘레멘트)


# 노마드코드
- 니꼴라스 TV_#1_html css javascript 차이가 무엇인고 (What is difference between HTML, CSS & Javascript)
-


# 웹 프로그래머 테크트리 (feat. 공부 순서) 한방에 설명한다 (Roadmap for Web Developers)
- https://www.youtube.com/watch?v=pEE_uJ-joUA
- 바닐라 자바스크립트: 딱 편해질 시점만큼
- 라이브러리는 나중에 배우셈
- 자바스크립트로 투두 리스트 만들기, 인터렉션: 에니메이션
- 쓰지도 않을 것 배우지마셈, 그 다음에 라이브러리 J쿼리 리액트
- 그 다음엔 백앤드 (node js, express) 배워서 프론트와 백엔드 구동 원리 이해
- html css -> js -> js 라이브러리 -> 백엔드
- learn out of necessity

# 프로그래밍 독학할 때 자주하는 실수 5가지
- https://www.youtube.com/watch?v=FF6CF8TZIhE
- 공부 < 실제로 해봐야 (be a maker)
- Build things
- 매일해야 함, 습관을 만들어야 함
- not a check list, but make a list of projects
- portfolio
- have a deadline

# 풀스택 주니어 웹 개발자가 되려면? ver.2020
- https://www.youtube.com/watch?v=ODa9mY2bEEc
- 풀스택: GUI 프론트엔드부터 데이터베이스 백엔드까지 소프트웨어 스택을 모두 이해하는 개발자
- understand > memorize
- clone coding (아무 사이트나 클론 코딩이 가능하면 html +css)
- ***javascript (많이 배워놓으면, 다른 리액트나 다른 언어 배우기 쉬워짐) - 
모달창, 슬라이더, 메뉴 등 인터락티브한거 많들 수 있어야, 프레임워크있든 없든
- node.js: CRUD (create read update delete)가 가능하도록, ex. Instagram
- 이 후 무엇을 할지는 본인 선호에 따라
- react.js - interactive한 것을 위해, typescript, graphQL 등 javascript로 삽질 후


# codecademy 자바스크립트 강의 듣기 https://www.codecademy.com/learn/introduction-to-javascript
- javascript is a language for web brosers
- java vs javascript: not in same category of programming
- html: structure, css: decoration, javascript: interaction
- https://www.codecademy.com/learn/introduction-to-javascript/modules/learn-javascript-introduction/cheatsheet

###############1#################
- print or log to console directly
- console refers to object, collection of data and actions
- keywords are words built into javascript language
- console.log()면 ()안이 printed
- // for comments or /* ... */
- console.log(/*IGNORED*/)

- Datatypes: classifications to different kinds of data in programming
  - numbers
  - string
  - Boulean
  - null
  - undefined
  - symbol
  - object
  --> primitive data types and objects (more complex)


- Arithmatic Operator
  - using built-in arithmetic operators
  - + - * / %
  - modulo (remainder operator)

- String Concatenation

- Properties
  - .length

- Methods
  - append an instance with: a period(dot operator), name of the method, opening and closing parenthesis
  - Eg. 'example string'.methodName()
console.log('hello'.toUpperCase()); // Prints 'HELLO'
console.log('Hey'.startsWith('H')); // Prints true
  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
  
 - Built-in Objects
 
  ############1-2#############
  - Create a Variable: var
var myName = 'Arya';
console.log(myName);
// Output: Arya
    - let and const to create or declare variables
    - var creates or declares a new variable
    - myName is the variable name
    - '=' is the assignment
  

Create a Variable: let
- signals that the variable can be reassigned a different value
 let price;
console.log(price); // Output: undefined
price = 350;
console.log(price); // Output: 350
  
Create a Variable: const
const myName = 'Gilberto';
console.log(myName); // Output: Gilberto
  - can store any value in a const variable
  - but cannot be reassinged because it is constant
  - constant variables must be assigned a value when declared
  ---> reassign: let, otherwise: const
  
 
 Mathematical Assignment Operators
let w = 4;
w = w + 1;
 
console.log(w); // Output: 5
  


The Increment and Decrement Operator
- increment operator (++) and decrement operator (--)


String Concatenation with Variables
let myPet = 'armadillo';
console.log('I own a pet ' + myPet + '.'); 
// Output: 'I own a pet armadillo.'


String Interpolation
  -interpolate, variables into strings using template literals. 
const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`);
// Output: I own a pet armadillo.
  - back tick ```` and {}

typeof operator
const unknown1 = 'foo';
console.log(typeof unknown1); // Output: string
 
const unknown2 = 10;
console.log(typeof unknown2); // Output: number
 
const unknown3 = true; 
console.log(typeof unknown3); // Output: boolean






#################2 Conditionals##############
if, else if, and else statements
comparison operators
logical operators
truthy vs falsy values
ternary operators
switch statement

if (true) {
  console.log('This message will print!'); 
}
// Prints: This message will print!

If...Else Statements

if (false) {
  console.log('The code in this block will not run.');
} else {
  console.log('But the code in this block will!');
}
 
// Prints: But the code in this block will!


Comparison Operators
- >, <, <=,>=,===,!==

Logical Operators
the and operator (&&)
the or operator (||)
the not operator, otherwise known as the bang operator (!)

if (stopLight === 'green' && pedestrians === 0) {
  console.log('Go!');
} else {
  console.log('Stop');
}
if (day === 'Saturday' || day === 'Sunday') {
  console.log('Enjoy the weekend!');
} else {
  console.log('Do some work.');
}

let excited = true;
console.log(!excited); // Prints false
 
let sleepy = false;
console.log(!sleepy); // Prints true

Truthy and Falsy
0
Empty strings like "" or ''
null which represent when there is no value at all
undefined which represent when a declared variable lacks a value
NaN, or Not a Number

Truthy and Falsy Assignment
let defaultName;
if (username) {
  defaultName = username;
} else {
  defaultName = 'Stranger';
}
let defaultName = username || 'Stranger';


# Ternary Operator
- using ? and :


# Else If Statements
let stopLight = 'yellow';
 
if (stopLight === 'red') {
  console.log('Stop!');
} else if (stopLight === 'yellow') {
  console.log('Slow down.');
} else if (stopLight === 'green') {
  console.log('Go!');
} else {
  console.log('Caution, unknown!');
}

# The switch keyword
let groceryItem = 'papaya';
 
switch (groceryItem) {
  case 'tomato':
    console.log('Tomatoes are $0.49');
    break;
  case 'lime':
    console.log('Limes are $1.49');
    break;
  case 'papaya':
    console.log('Papayas are $1.29');
    break;
  default:
    console.log('Invalid item');
    break;
}
 
// Prints 'Papayas are $1.29'


###########3. scope #############
- variables can be accessed or referenced


# Blocks and Scope
  - {} blocks

const logSkyColor = () => {
  let color = 'blue'; 
  console.log(color); // blue 
}


const city = 'New York City';

const logCitySkyline = () => {
  let skyscraper = 'Empire State Building';
  return 'The stars over the ' + skyscraper + ' in ' + city;
};

console.log(logCitySkyline());

# Global Scope
const color = 'blue';
 
const returnSkyColor = () => {
  return color; // blue 
};
 
console.log(returnSkyColor()); // blue






#global scope
const satellite = 'The Moon';
const galaxy = 'The Milky Way';
const stars = 'North Star';

const callMyNightSky = () => {
	return 'Night Sky: ' + satellite + ', ' + stars + ', and ' + galaxy;
};

console.log(callMyNightSky());



# block scope
const logVisibleLightWaves = () => {
  const lightWaves = 'Moonlight';
  console.log(lightWaves);
};

logVisibleLightWaves();

// console.log(lightWaves);



# Scope Pollution
const satellite = 'The Moon';
const galaxy = 'The Milky Way';
let stars = 'North Star';

const callMyNightSky = () => {
  stars = 'Sirius';
	return 'Night Sky: ' + satellite + ', ' + stars + ', ' + galaxy;
};

console.log(callMyNightSky());
console.log(stars);


# Practice Good Scoping

const logVisibleLightWaves = () => {
  let lightWaves = 'Moonlight';
	let region = 'The Arctic';
  // Add if statement here:
  if (region === 'The Arctic'){
    let lightWaves = 'Northern Lights';
    console.log(lightWaves);
  }
  
  console.log(lightWaves);
};

logVisibleLightWaves();


# functions
- a function declaration binds a value to a variable name, or an identifier

function identifier(){
console.log('Hello, World!');
}




 # Calling a Function
 sayThanks();
 
 # Parameters and Arguments
 function calculateArea(width, height) { console.log(width*height);}
 function sayThanks(name) {
  console.log('Thank you for your purchase '+ name + '! We appreciate your business.');
}
sayThanks('Cole');


# Default Parameters
function greeting (name = 'stranger') {
  console.log(`Hello, ${name}!`)
}
 
greeting('Nick') // Output: Hello, Nick!
greeting() // Output: Hello, stranger!

function makeShoppingList(item1 = 'milk', item2 = 'bread', item3 = 'eggs')

# Return
function rectangleArea(width, height) {
  if (width < 0 || height < 0) {
    return 'You need positive integers to calculate area!';
  }
  return width * height;
}
function monitorCount(rows, columns) {
  return rows * columns;
}

const numOfMonitors = monitorCount(5, 4);

console.log(numOfMonitors);




# Helper Functions
function multiplyByNineFifths(number) {
  return number * (9/5);
};
 
function getFahrenheit(celsius) {
  return multiplyByNineFifths(celsius) + 32;
};
 
getFahrenheit(15); // Returns 59
 
 
function monitorCount(rows, columns) {
  return rows * columns;
}

function costOfMonitors(rows, columns) {
 return monitorCount(rows, columns)  * 200;
}

const totalCost = costOfMonitors(5, 4);

console.log(totalCost);


# Function Expressions
const plantNeedsWater = function(day) {
  if(day === 'Wednesday'){
    return true;
  } else {
    return false;
  }
};

plantNeedsWater('Tuesday');

console.log(plantNeedsWater('Tuesday'));




# Arrow Functions
const plantNeedsWater = (day) => {
  if (day === 'Wednesday') {
    return true;
  } else {
    return false;
  }
};



# Concise Body Arrow Functions
const squareNum = (num) => {
  return num * num;
};


const plantNeedsWater = day => day === 'Wednesday' ? true : false;









c


